---
# Source: robomotion/charts/ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx
---
# Source: robomotion/charts/minio/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: robomotion-minio
  namespace: "robomotion-system"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.0
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: robomotion-minio
---
# Source: robomotion/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: robomotion
  namespace: robomotion-system
  labels:
    app: robomotion
    chart: robomotion-1.12.2
    release: robomotion
    heritage: Helm
---
# Source: robomotion/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: robomotion-minio
  namespace: "robomotion-system"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.0
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  access-key: "ck5TbzJFUmZ4bg=="
  secret-key: "MzhEY2l1SEpxVUJNaUFSdTVFUGx3UUphdGoyVmt4dFlUU1VQMVNSTQ=="
---
# Source: robomotion/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: robomotion-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgresql-postgres-password: "bWhPenAwZkMwRg=="
  postgresql-password: "dUg4aHhZcURQcQ=="
---
# Source: robomotion/charts/redis/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: robomotion-redis
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    release: "robomotion"
    heritage: "Helm"
type: Opaque
data:
  redis-password: "TnVFWTMwRWFEOA=="
---
# Source: robomotion/charts/ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx-controller
data:
---
# Source: robomotion/charts/redis/templates/configmap-scripts.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: robomotion-redis-scripts
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: robomotion
data:
  start-master.sh: |
    #!/bin/bash
    useradd redis
    chown -R redis /data
    if [[ -n $REDIS_PASSWORD_FILE ]]; then
      password_aux=`cat ${REDIS_PASSWORD_FILE}`
      export REDIS_PASSWORD=$password_aux
    fi
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
      cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec /run.sh "${ARGS[@]}"
---
# Source: robomotion/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: robomotion-redis
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: robomotion
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
---
# Source: robomotion/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: robomotion-redis-health
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    heritage: Helm
    release: robomotion
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: robomotion/charts/minio/templates/pvc-standalone.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: robomotion-minio
  namespace: "robomotion-system"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.0
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "3Gi"
---
# Source: robomotion/charts/ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
  name: robomotion-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: robomotion/templates/api-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: api-role
  namespace: robomotion-system
rules:
 - apiGroups: ["*"]
   resources: ["namespaces"]
   verbs: ["get"]
---
# Source: robomotion/charts/ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
  name: robomotion-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: robomotion-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: robomotion-ingress-nginx
    namespace: robomotion-system
---
# Source: robomotion/templates/api-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-rolebinding
  namespace: robomotion-system
roleRef:
  kind: ClusterRole
  name: api-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  namespace: robomotion-system
  name: robomotion
---
# Source: robomotion/charts/ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: robomotion/charts/ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: robomotion-ingress-nginx
subjects:
  - kind: ServiceAccount
    name: robomotion-ingress-nginx
    namespace: robomotion-system
---
# Source: robomotion/charts/ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx-controller-admission
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/component: controller
---
# Source: robomotion/charts/ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx-controller
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/component: controller
---
# Source: robomotion/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-minio
  namespace: "robomotion-system"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.0
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: minio
      port: 9000
      targetPort: minio
      nodePort: null
  selector:
    app.kubernetes.io/name: minio
    app.kubernetes.io/instance: robomotion
---
# Source: robomotion/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-postgresql-headless
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: robomotion
---
# Source: robomotion/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: robomotion
    role: primary
---
# Source: robomotion/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-redis-headless
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    release: robomotion
    heritage: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: robomotion
---
# Source: robomotion/charts/redis/templates/redis-master-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-redis-master
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    release: robomotion
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: redis
    release: robomotion
    role: master
---
# Source: robomotion/templates/admin-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-admin
  labels:
    app: robomotion-admin
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: admin
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http

  selector:
    app: robomotion-admin
---
# Source: robomotion/templates/api-grpc-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-api-grpc
  labels:
    app: robomotion-api
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: api
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: robomotion-api
---
# Source: robomotion/templates/api-http-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-api
  labels:
    app: robomotion-api
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http

  selector:
    app: robomotion-api
---
# Source: robomotion/templates/auth-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-authorization
  labels:
    app: robomotion-authorization
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: authorization
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http

  selector:
    app: robomotion-authorization
---
# Source: robomotion/templates/designer-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-designer
  labels:
    app: robomotion-designer
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: designer
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http

  selector:
    app: robomotion-designer
---
# Source: robomotion/templates/proxy-grpc-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-proxy-grpc
  labels:
    app: robomotion-proxy
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: proxy
spec:
  type: ClusterIP
  ports:
  - name: grpc
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    app: robomotion-proxy
---
# Source: robomotion/templates/proxy-http-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-proxy
  labels:
    app: robomotion-proxy
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: proxy
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: robomotion-proxy
---
# Source: robomotion/templates/scheduler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: robomotion-scheduler-grpc
  labels:
    app: robomotion-scheduler
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: scheduler
spec:
  type: ClusterIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080

  selector:
    app: robomotion-scheduler
---
# Source: robomotion/charts/ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: robomotion-ingress-nginx-controller
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/instance: robomotion
      app.kubernetes.io/component: controller
  replicas: 1
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: robomotion
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256:1f4f402b9c14f3ae92b11ada1dfe9893a88f0faeb0b2f4b903e2c67a0c3bf0de"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/robomotion-ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/robomotion-ingress-nginx-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources: 
            requests:
              cpu: 100m
              memory: 90Mi
      nodeSelector: 
        kubernetes.io/os: linux
      serviceAccountName: robomotion-ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: robomotion-ingress-nginx-admission
---
# Source: robomotion/charts/minio/templates/deployment-standalone.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-minio
  namespace: "robomotion-system"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-4.1.0
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
spec:
  strategy: 
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: minio
      app.kubernetes.io/instance: robomotion
  template:
    metadata:
      labels:
        app.kubernetes.io/name: minio
        helm.sh/chart: minio-4.1.0
        app.kubernetes.io/instance: robomotion
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/credentials-secret: 41b32cc5e9090897014eb8a4748a06e6c7e0175167e2036c9ab4a571b0a97aa7
    spec:
      serviceAccountName: robomotion-minio
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: minio
                    app.kubernetes.io/instance: robomotion
                namespaces:
                  - robomotion-system
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2020.11.25-debian-10-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: robomotion-minio
                  key: access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: robomotion-minio
                  key: secret-key
            - name: MINIO_DEFAULT_BUCKETS
              value: robomotion
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          
          ports:
            - name: minio
              containerPort: 9000
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            httpGet:
              path: /minio/health/live
              port: minio
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            tcpSocket:
              port: minio
          resources: 
            limits: {}
            requests:
              memory: 512Mi
          volumeMounts:
            - name: "data"
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: robomotion-minio
---
# Source: robomotion/templates/admin-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-admin
  labels:
    app: robomotion-admin
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: admin
spec:
  selector:
    matchLabels:
      app: robomotion-admin
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-admin
    spec:
      containers:
      - name: robomotion-admin
        image: "gcr.io/robomotion/robomotion-admin:28b860969"
        ports:
        - containerPort: 80
          name: http
        env:
          - name: API_URL
            value: http://robomotion.local/api
          - name: APP_URL
            value: http://robomotion.local/
          - name: SESSION_STORE_KEY
            valueFrom:
              secretKeyRef:
                name: robomotion-session-store
                key: secret
---
# Source: robomotion/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-api
  labels:
    app: robomotion-api
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: api
spec:
  selector:
    matchLabels:
      app: robomotion-api
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-api
    spec:
      serviceAccountName: robomotion
      containers:
      - name: robomotion-api
        image: "gcr.io/robomotion/robomotion-api-service:28b860969"
        ports:
        - containerPort: 80
          name: http
        - containerPort: 9000
          name: grpc
        env:
          - name: PROXY_SRV
            value: robomotion-proxy-grpc
          - name: SCHED_SRV
            value: robomotion-scheduler-grpc
          - name: MINIO_EXPOSED_URL
            value: http://robomotion.local/objects
          - name: API_PATH
            value: /api
          - name: REPLY_MAIL
            value: noreply@robomotion.local
          - name: COOKIE_DOMAIN
            value: robomotion.local
          - name: ALLOW_ORIGIN
            value: robomotion.local
          - name: REDIS_SCHEME
            value: redis
          - name: REDIS_HOST
            value: robomotion-redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: robomotion-redis
                key: redis-password
          - name: STORE_ENDPOINT
            value: robomotion-minio:9000
          - name: STORE_BUCKET
            value: "robomotion"          
          - name: STORE_ACCESSKEY
            valueFrom:
              secretKeyRef:
                name: robomotion-minio
                key: access-key
          - name: STORE_SECRET
            valueFrom:
              secretKeyRef:
                name: robomotion-minio
                key: secret-key
          - name: POSTGRES_HOST
            value: robomotion-postgresql
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: "robomotion"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: robomotion-postgresql
                key: postgresql-password
---
# Source: robomotion/templates/auth-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-authorization
  labels:
    app: robomotion-authorization
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: authorization
spec:
  selector:
    matchLabels:
      app: robomotion-authorization
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-authorization
    spec:
      containers:
      - name: robomotion-authorization
        image: "gcr.io/robomotion/robomotion-authorization:28b860969"
        ports:
        - containerPort: 80
          name: http
        env:
          - name: DOMAIN
            value: robomotion.local
          - name: API_URL
            value: http://robomotion.local/api
          - name: APP_URL
            value: http://robomotion.local/
          - name: SESSION_STORE_KEY
            valueFrom:
              secretKeyRef:
                name: robomotion-session-store
                key: secret
---
# Source: robomotion/templates/designer-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-designer
  labels:
    app: robomotion-designer
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: designer
spec:
  selector:
    matchLabels:
      app: robomotion-designer
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-designer
    spec:
      containers:
      - name: robomotion-designer
        image: "gcr.io/robomotion/robomotion-designer:28b860969"
        ports:
        - containerPort: 80
          name: http
        env:
          - name: ORIGIN
            value: robomotion.local/designer
          - name: API_URL
            value: http://robomotion.local/api
          - name: AUTH_URL
            value: http://robomotion.local/
          - name: SESSION_STORE_KEY
            valueFrom:
              secretKeyRef:
                name: robomotion-session-store
                key: secret
          - name: WS_URL
            value: ws://robomotion.local/proxy/studio
---
# Source: robomotion/templates/proxy-deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: robomotion-proxy
  labels:
    app: robomotion-proxy
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: proxy
spec:
  selector:
    matchLabels:
      app: robomotion-proxy
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-proxy
    spec:
      containers:
      - name: robomotion-proxy
        image: "gcr.io/robomotion/robomotion-proxy:28b860969"
        ports:
        - containerPort: 80
          name: http
        - containerPort: 9000
          name: grpc
        env:
          - name: API_SRV
            value: robomotion-api-grpc        
          - name: PROXY_PATH
            value: /proxy
          - name: REDIS_SCHEME
            value: redis
          - name: REDIS_HOST
            value: robomotion-redis-master
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: robomotion-redis
                key: redis-password
---
# Source: robomotion/templates/scheduler-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: robomotion-scheduler
  labels:
    app: robomotion-scheduler
    chart: robomotion-1.12.2
    heritage: Helm
    release: robomotion
    component: scheduler
spec:
  selector:
    matchLabels:
      app: robomotion-scheduler
  replicas: 1
  template:
    metadata:
      labels:
        app: robomotion-scheduler
    spec:
      containers:
      - name: robomotion-scheduler
        image: "gcr.io/robomotion/robomotion-scheduler:28b860969"
        ports:
        - containerPort: 8080
          name: grpc
        env:
          - name: PROXY_SRV
            value: robomotion-proxy-grpc
          - name: POSTGRES_HOST
            value: robomotion-postgresql
          - name: POSTGRES_PORT
            value: "5432"
          - name: POSTGRES_DB
            value: "robomotion"
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: robomotion-postgresql
                key: postgresql-password
          - name: STORE_ENDPOINT
            value: robomotion-minio:9000
          - name: STORE_BUCKET
            value: "robomotion"          
          - name: STORE_ACCESSKEY
            valueFrom:
              secretKeyRef:
                name: robomotion-minio
                key: access-key
          - name: STORE_SECRET
            valueFrom:
              secretKeyRef:
                name: robomotion-minio
                key: secret-key
---
# Source: robomotion/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: robomotion-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-10.1.1
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  serviceName: robomotion-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: robomotion
      role: primary
  template:
    metadata:
      name: robomotion-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-10.1.1
        app.kubernetes.io/instance: robomotion
        app.kubernetes.io/managed-by: Helm
        role: primary
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: robomotion-postgresql
          image: docker.io/bitnami/postgresql:11.10.0-debian-10-r9
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: robomotion-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "robomotion"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -d "dbname=robomotion" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -d "dbname=robomotion" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
---
# Source: robomotion/charts/redis/templates/redis-master-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: robomotion-redis-master
  namespace: "robomotion-system"
  labels:
    app: redis
    chart: redis-12.1.1
    release: robomotion
    heritage: Helm
spec:
  selector:
    matchLabels:
      app: redis
      release: robomotion
      role: master
  serviceName: robomotion-redis-headless
  template:
    metadata:
      labels:
        app: redis
        chart: redis-12.1.1
        release: robomotion
        role: master
      annotations:
        checksum/health: 1249f656b609421e25eb5e68abca9f4053ed02ab0d149d89c9151fe8574abd7a
        checksum/configmap: 8f2c2540891c37c26d68db3ceca0fdf9247fb4bebb47f6abd0923a59f6ecd4a5
        checksum/secret: 3da294429583ea18f147010d138c727f98e4363d74c10efe520332364eabcd53
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.0.9-debian-10-r13
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: robomotion-redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            null
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: start-scripts
          configMap:
            name: robomotion-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: robomotion-redis-health
            defaultMode: 0755
        - name: config
          configMap:
            name: robomotion-redis
        - name: redis-tmp-conf
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app: redis
          release: robomotion
          heritage: Helm
          component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
        
        selector:
  updateStrategy:
    type: RollingUpdate
---
# Source: robomotion/templates/migrations-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: robomotion-migrations
spec:
  activeDeadlineSeconds: 1800
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.5
        env:
        - name: POSTGRES_HOST
          value: robomotion-postgresql
        - name: POSTGRES_PORT
          value: "5432"        
        command: ['sh', '-c',
          'until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT;
          do echo waiting for database; sleep 2; done;']
      containers:
        - name: robomotion-migrations
          image: "gcr.io/robomotion/robomotion-migrations:28b860969"
          env:
            - name: POSTGRES_HOST
              value: robomotion-postgresql
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "robomotion"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: robomotion-postgresql
                  key: postgresql-password
          command: ["/migrate"]
          args: ["-path", "/migrations", "-database",
                  "postgres://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DB)?sslmode=disable", "up"]
---
# Source: robomotion/templates/admin-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-admin
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: robomotion.local
    http:
      paths:
      - path: /admin
        backend:
          serviceName: robomotion-admin
          servicePort: 80
---
# Source: robomotion/templates/api-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-api
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 16m
spec:
  rules:
  - host: "robomotion.local"
    http:
      paths:
      - path: /api
        backend:
          serviceName: robomotion-api
          servicePort: 80
---
# Source: robomotion/templates/auth-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-authorization
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: "robomotion.local"
    http:
      paths:
      - path: /
        backend:
          serviceName: robomotion-authorization
          servicePort: 80
---
# Source: robomotion/templates/designer-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-designer
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.org/websocket-services: ws-svc
spec:
  rules:
  - host: "robomotion.local"
    http:
      paths:
      - path: /designer
        backend:
          serviceName: robomotion-designer
          servicePort: 80
---
# Source: robomotion/templates/objectStore-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-minio
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/upstream-vhost: robomotion-minio:9000
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: "robomotion.local"
    http:
      paths:
      - path: /objects/?(.*)
        backend:
          serviceName: robomotion-minio
          servicePort: 9000
---
# Source: robomotion/templates/proxy-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: robomotion-proxy
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.org/websocket-services: ws-svc
spec:
  rules:
  - host: "robomotion.local"
    http:
      paths:
      - path: /proxy
        backend:
          serviceName: robomotion-proxy
          servicePort: 80
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
# before changing this value, check the required kubernetes version
# https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: robomotion-ingress-nginx-admission
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    matchPolicy: Equivalent
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    sideEffects: None
    admissionReviewVersions:
      - v1
      - v1beta1
    clientConfig:
      service:
        namespace: robomotion-system
        name: robomotion-ingress-nginx-controller-admission
        path: /networking/v1beta1/ingresses
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: robomotion-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: robomotion/templates/session-store-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: robomotion-session-store
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
  labels:
    app.kubernetes.io/name: robomotion
    helm.sh/chart: robomotion-1.12.2
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  secret: bz5FqOvFgWIbwF2lY7OjhyZbstMcjsbh
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: robomotion-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name:  robomotion-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: robomotion-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: robomotion-ingress-nginx-admission
    namespace: robomotion-system
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name:  robomotion-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: robomotion-ingress-nginx-admission
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: robomotion-ingress-nginx-admission
subjects:
  - kind: ServiceAccount
    name: robomotion-ingress-nginx-admission
    namespace: robomotion-system
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: robomotion-ingress-nginx-admission-create
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: robomotion-ingress-nginx-admission-create
      labels:
        helm.sh/chart: ingress-nginx-3.16.1
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: robomotion
        app.kubernetes.io/version: "0.41.2"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "docker.io/jettech/kube-webhook-certgen:v1.5.0"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=robomotion-ingress-nginx-controller-admission,robomotion-ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=robomotion-ingress-nginx-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: robomotion-ingress-nginx-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: robomotion/charts/ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: robomotion-ingress-nginx-admission-patch
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-3.16.1
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/instance: robomotion
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  template:
    metadata:
      name: robomotion-ingress-nginx-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-3.16.1
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/instance: robomotion
        app.kubernetes.io/version: "0.41.2"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "docker.io/jettech/kube-webhook-certgen:v1.5.0"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=robomotion-ingress-nginx-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=robomotion-ingress-nginx-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: robomotion-ingress-nginx-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
