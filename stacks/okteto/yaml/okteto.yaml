---
# Source: okteto-enterprise/templates/permissive-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: "do-okteto-enterprise-permissive"
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-permissive"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: true
  hostNetwork: true
  allowPrivilegeEscalation: true
  defaultAllowPrivilegeEscalation: true
  hostPID: true
  hostIPC: true
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  hostPorts:
  - min: 0
    max: 65535
  volumes:
  - '*'
  allowedCapabilities:
  - '*'
---
# Source: okteto-enterprise/templates/restrictive-psp.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: "do-okteto-enterprise-restrictive"
  annotations:
    apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default
    apparmor.security.beta.kubernetes.io/defaultProfileName: runtime/default
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'docker/default,runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-restrictive"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  privileged: false
  hostNetwork: false
  allowPrivilegeEscalation: false
  defaultAllowPrivilegeEscalation: false
  hostPID: false
  hostIPC: false
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  allowedHostPaths:
    - pathPrefix: "/var/okteto/bin"
      readOnly: true
  volumes:
  - hostPath
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - secret
  - projected
  allowedCapabilities:
    - '*'
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager-cainjector
  namespace: "okteto"
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
---
# Source: okteto-enterprise/charts/cert-manager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager
  namespace: "okteto"
  annotations:
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress-backend
---
# Source: okteto-enterprise/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: do-okteto-enterprise
  labels:
    app: do-okteto-enterprise
    chart: "okteto-enterprise-0.5.1"
    release: "do"
    heritage: "Helm"
    
    dev.okteto.com/token: "PLACEHOLDER_VALUE"
    
  annotations:
    dev.okteto.com/super: "true"
---
# Source: okteto-enterprise/templates/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: do-okteto-enterprise-registry-secret
  labels:
    app.kubernetes.io/component: "registry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-registry-secret"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  haSharedSecret: ""
---
# Source: okteto-enterprise/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-secret"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
type: Opaque
data:
  "OKTETO_LICENSE": ""
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    component: "controller"
    heritage: Helm
    release: do
  name: do-nginx-ingress-controller
data:
  custom-http-errors: 502,503
  enable-underscores-in-headers: "true"
  ignore-invalid-headers: "false"
  proxy-body-size: 60M
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/tcp-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    component: "controller"
    heritage: Helm
    release: do
  name: do-nginx-ingress-tcp
data:
  "1234": buildkit-service-placeholder
---
# Source: okteto-enterprise/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
  name: "do-okteto-enterprise"
  namespace: okteto
data:
  "OKTETO_MAINTENANCE": "false"
  "CLUSTER_PUBLIC_ENDPOINT": ""
  "OKTETO_APP_INSTALLER_CLUSTER_ROLE": "do-okteto-enterprise-app-installer"
  "OKTETO_APPLICATIONS_REPOSITORY": "https://apps.okteto.com"
  "OKTETO_BASE_DOMAIN": "localhost"
  "OKTETO_DEV_CLUSTER_ROLE": "do-okteto-enterprise-psp"
  "OKTETO_MULTITENANCY_HARD": "false"
  "OKTETO_POD_SECURITY_POLICY": "do-okteto-enterprise-restrictive"
  "OKTETO_PRODUCTION_MODE": "false"
  "OKTETO_PUBLIC_URL": "okteto.localhost"
  "OKTETO_SCHEDULE_PODS_BY_PRESSURE": "false"
  "OKTETO_USER_DEFINED_NAMESPACES": "true"
  "OKTETO_TELEMETRY_TOKEN": ""
  "OKTETO_DEFAULT_PLAN": "enterprise"
  "OKTETO_PRO_PLAN_POOL": ""
  "OKTETO_REGISTRY_URL": "registry.localhost"
  "OKTETO_BUILDKIT_URL": "tcp://buildkit.localhost:1234"
---
# Source: okteto-enterprise/templates/registry-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: do-okteto-enterprise-registry-config
  labels:
    app.kubernetes.io/component: "registry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-registry-config"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
data:
  config.yml: |-
    version: 0.1
    log:
      accesslog:
        disabled: true
      fields:
        service: registry
      formatter: json
      level: info
    storage:
      cache:
        blobdescriptor: inmemory
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
---
# Source: okteto-enterprise/templates/tcp-configmap.yaml
apiVersion: v1
data:
  "1234": okteto/do-okteto-enterprise-buildkit:1234
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: "tcp-services-configmap"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: "nginx-ingress"
    app.kubernetes.io/part-of: "okteto"
  name: tcp-services-configmap
  namespace: okteto
---
# Source: okteto-enterprise/templates/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: do-okteto-enterprise-registry
  labels:
    app: do-okteto-enterprise
    chart: "okteto-enterprise-0.5.1"
    release: "do"
    heritage: "Helm"
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "40Gi"
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "create", "update", "patch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "update"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# Issuer controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "issuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# ClusterIssuer controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "clusterissuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# Certificates controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/finalizers", "certificaterequests/finalizers"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# Orders controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "orders/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["create", "delete"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# Challenges controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  # Use to update challenge resource status
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "challenges/status"]
    verbs: ["update"]
  # Used to watch challenge resources
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["get", "list", "watch"]
  # Used to watch challenges, issuer and clusterissuer resources
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  # Need to be able to retrieve ACME account private key to complete challenges
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  # Used to create events
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # HTTP01 rules
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges/finalizers"]
    verbs: ["update"]
  # DNS01 rules (duplicated above)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# ingress-shim controller role
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: do-cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["extensions"]
    resources: ["ingresses/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-view
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["get", "list", "watch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-edit
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-cert-manager-webhook:webhook-requester
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
- apiGroups:
  - admission.cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  - clusterissuers
  verbs:
  - create
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
---
# Source: okteto-enterprise/templates/app-installer-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-okteto-enterprise-app-installer
  labels:
    app.kubernetes.io/name:  do-okteto-enterprise-app-installer
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - policy
  resourceNames:
  - "do-okteto-enterprise-restrictive"
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# Source: okteto-enterprise/templates/dev-cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: do-okteto-enterprise-psp
  labels:
    app.kubernetes.io/name: do-okteto-enterprise-psp
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - pods/exec
  - pods/attach
  - pods/portforward
  - configmaps
  - secrets
  - services
  - endpoints
  - serviceaccounts
  - events
  - persistentvolumeclaims
  - replicationcontrollers
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - events
  - limitranges
  - namespaces
  - namespaces/status
  - resourcequotas
  - resourcequotas/status
  verbs:
  - get
  - list
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  verbs:
  - get
  - list
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  - deployments/scale
  - replicasets/scale
  - statefulsets/scale
  verbs:
  - '*'
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - deployments
  - ingresses
  - replicasets
  - deployments/scale
  - replicasets/scale
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - '*'
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - '*'
- apiGroups:
  - policy
  resourceNames:
  - "do-okteto-enterprise-restrictive"
  resources:
  - podsecuritypolicies
  verbs:
  - use
- apiGroups:
    - apiextensions.k8s.io
  resources:
    - customresourcedefinitions
  verbs:
    - list
    - watch
- apiGroups:
    - helm.fluxcd.io
  resources:
    - helmreleases
    - helmreleases/status
  verbs:
  - '*'
- apiGroups:
    - helm.integrations.flux.weave.works
  resources:
    - fluxhelmreleases
  verbs:
  - '*'
- apiGroups:
    - configuration.konghq.com
  resources:
    - kongplugins
    - kongconsumers
    - kongcredentials
    - kongingresses
    - tcpingresses
  verbs:
  - '*'
- apiGroups:
    - openfaas.com
  resources:
    - functions
  verbs:
  - '*'
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-cainjector
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-cainjector
subjects:
  - name: do-cert-manager-cainjector
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-issuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-issuers
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-clusterissuers
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-clusterissuers
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-certificates
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-certificates
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-orders
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-orders
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-challenges
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-challenges
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-controller-ingress-shim
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-cert-manager-controller-ingress-shim
subjects:
  - name: do-cert-manager
    namespace: "okteto"
    kind: ServiceAccount
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-rbac.yaml
# apiserver gets the auth-delegator role to delegate auth decisions to
# the core apiserver
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-cert-manager-webhook:auth-delegator
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: do-cert-manager-webhook
  namespace: okteto
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: do-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: do-nginx-ingress
    namespace: okteto
---
# Source: okteto-enterprise/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: do-okteto-enterprise-role-binding
  labels:
    app: do-okteto-enterprise
    chart: "okteto-enterprise-0.5.1"
    release: "do"
    heritage: "Helm"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: do-okteto-enterprise
  namespace: okteto
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-rbac.yaml
# leader election rules
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: do-cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  # Used for leader election by the controller
  # TODO: refine the permission to *just* the leader election configmap
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: do-cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
rules:
  # Used for leader election by the controller
  # TODO: refine the permission to *just* the leader election configmap
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: okteto-enterprise/templates/psp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: "do-okteto-enterprise-internal"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-internal"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - policy
  resourceNames:
  - "do-okteto-enterprise-permissive"
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-rbac.yaml
# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager-cainjector:leaderelection
  namespace: kube-system
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-cert-manager-cainjector:leaderelection
subjects:
  - kind: ServiceAccount
    name: do-cert-manager-cainjector
    namespace: okteto
---
# Source: okteto-enterprise/charts/cert-manager/templates/rbac.yaml
# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager:leaderelection
  namespace: kube-system
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-cert-manager:leaderelection
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: do-cert-manager
    namespace: okteto
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-rbac.yaml
# apiserver gets the ability to read authentication. This allows it to
# read the specific configmap that has the requestheader-* entries to
# api agg
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: do-cert-manager-webhook:webhook-authentication-reader
  namespace: kube-system
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: do-cert-manager-webhook
  namespace: okteto
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
  name: do-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: do-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: do-nginx-ingress
    namespace: okteto
---
# Source: okteto-enterprise/templates/psp-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "do-okteto-enterprise-internal"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-internal"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
subjects:
- kind: ServiceAccount
  name: "do-cert-manager"
  namespace: okteto
- kind: ServiceAccount
  name: "do-cert-manager-cainjector"
  namespace: okteto
- kind: ServiceAccount
  name: "do-cert-manager-webhook"
  namespace: okteto
- kind: ServiceAccount
  name: "do-nginx-ingress"
  namespace: okteto
- kind: ServiceAccount
  name: "do-nginx-ingress-backend"
  namespace: okteto
- kind: ServiceAccount
  name: "do-okteto-enterprise"
  namespace: okteto
- kind: ServiceAccount
  name: "default"
  namespace: okteto
roleRef:
  kind: Role
  name: "do-okteto-enterprise-internal"
  apiGroup: rbac.authorization.k8s.io
---
# Source: okteto-enterprise/charts/cert-manager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: do-cert-manager
  namespace: "okteto"
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 9402
      targetPort: 9402
  selector:
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: 10250
  selector:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    component: "controller"
    heritage: Helm
    release: do
  name: do-nginx-ingress-controller
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: "1234-tcp"
      port: 1234
      protocol: TCP
      targetPort: "1234-tcp"
  selector:
    app: nginx-ingress
    release: do
    app.kubernetes.io/component: controller
  type: "LoadBalancer"
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    component: "default-backend"
    heritage: Helm
    release: do
  name: do-nginx-ingress-default-backend
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: nginx-ingress
    release: do
    app.kubernetes.io/component: default-backend
  type: "ClusterIP"
---
# Source: okteto-enterprise/templates/api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-api"
  labels:
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/templates/buildkit-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-buildkit"
  labels:
    app.kubernetes.io/component: "buildkit"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-buildkit"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 1234
      name: buildkit
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-buildkit"
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-frontend"
  labels:
    app.kubernetes.io/component: "frontend"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: frontend
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/templates/registry-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-registry"
  labels:
    app.kubernetes.io/component: "registry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-registry"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 5000
      name: registry
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-registry"
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 443
      name: webhook
      targetPort: 443
  selector:
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    app.kubernetes.io/instance: do
---
# Source: okteto-enterprise/templates/daemon.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: "do-okteto-enterprise-daemon"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-daemon"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/component: "daemon"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-daemon"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-daemon"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "daemon"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        app.kubernetes.io/version: "do-okteto-enterprise-0.5.1"
    spec:
      hostPID: true
      terminationGracePeriodSeconds: 0
      serviceAccountName: do-okteto-enterprise
      initContainers:
      - name: prepull 
        image: docker:stable
        command: 
          - /bin/sh
          - -c
          - "docker pull okteto/helm-installer:1.0.5 || true"
        volumeMounts:
        - name: dockersock
          mountPath: /var/run/docker.sock
      containers:
        - name: daemon
          image: okteto/bin:1.1.18-cloud
          securityContext:
            privileged: true
          command:
            - /bin/sh
            - -c
            - "cp /usr/local/bin/* /var/okteto/bin && echo 10048576 > /proc-aux/sys/fs/inotify/max_user_watches  && sysctl -w vm.max_map_count=262144 && tail -f /dev/null"
          volumeMounts:
          - mountPath: /proc-aux
            name: proc-volume
          - mountPath: /var/okteto/bin
            name: okteto-bin
      volumes:
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      - name: proc-volume
        hostPath:
          path: /proc
      - name: okteto-bin
        hostPath:
          path: /var/okteto/bin
---
# Source: okteto-enterprise/charts/cert-manager/templates/cainjector-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager-cainjector
  namespace: "okteto"
  labels:
    app: cainjector
    app.kubernetes.io/name: cainjector
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cainjector
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app: cainjector
        app.kubernetes.io/name: cainjector
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: cert-manager-v0.13.0
      annotations:
    spec:
      serviceAccountName: do-cert-manager-cainjector
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-cainjector:v0.13.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
---
# Source: okteto-enterprise/charts/cert-manager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager
  namespace: "okteto"
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cert-manager
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app: cert-manager
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: cert-manager-v0.13.0
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: do-cert-manager
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-controller:v0.13.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --webhook-namespace=$(POD_NAMESPACE)
          - --webhook-ca-secret=do-cert-manager-webhook-ca
          - --webhook-serving-secret=do-cert-manager-webhook-tls
          - --webhook-dns-names=do-cert-manager-webhook,do-cert-manager-webhook.okteto,do-cert-manager-webhook.okteto.svc
          ports:
          - containerPort: 9402
            protocol: TCP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: do-cert-manager-webhook
  namespace: "okteto"
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook
      app.kubernetes.io/name: webhook
      app.kubernetes.io/instance: do
      app.kubernetes.io/managed-by: Helm
  template:
    metadata:
      labels:
        app: webhook
        app.kubernetes.io/name: webhook
        app.kubernetes.io/instance: do
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: cert-manager-v0.13.0
      annotations:
    spec:
      serviceAccountName: do-cert-manager-webhook
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-webhook:v0.13.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --secure-port=10250
          - --tls-cert-file=/certs/tls.crt
          - --tls-private-key-file=/certs/tls.key
          livenessProbe:
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
          volumeMounts:
          - name: certs
            mountPath: /certs
      volumes:
      - name: certs
        secret:
          secretName: do-cert-manager-webhook-tls
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
    app.kubernetes.io/component: controller
  name: do-nginx-ingress-controller
  annotations:
    {}
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    {}
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
        release: do
        component: "controller"
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: nginx-ingress-controller
          image: "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - /nginx-ingress-controller
            - --default-backend-service=okteto/do-nginx-ingress-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=okteto/do-nginx-ingress-controller
            - --tcp-services-configmap=okteto/do-nginx-ingress-tcp
            - --default-ssl-certificate=$(POD_NAMESPACE)/default-ssl-certificate
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services-configmap
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: "1234-tcp"
              containerPort: 1234
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            {}
      hostNetwork: false
      serviceAccountName: do-nginx-ingress
      terminationGracePeriodSeconds: 60
---
# Source: okteto-enterprise/charts/nginx-ingress/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-1.39.1
    heritage: Helm
    release: do
    app.kubernetes.io/component: default-backend
  name: do-nginx-ingress-default-backend
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: do
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: nginx-ingress
        release: do
        app.kubernetes.io/component: default-backend
    spec:
      containers:
        - name: nginx-ingress-default-backend
          image: "okteto/custom-error-pages:0.1.1"
          imagePullPolicy: "IfNotPresent"
          args:
          securityContext:
            runAsUser: 65534
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
      serviceAccountName: do-nginx-ingress-backend
      terminationGracePeriodSeconds: 60
---
# Source: okteto-enterprise/templates/api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-api"
  labels:
    app.kubernetes.io/component: "api"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-api"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-api"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-api"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "api"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/configmap: 412924f061233c3a43b93b18b0f63f68ac2e32bcefa4f2613e7d276477acb246
        checksum/secrets: 8ba60211f7d5d20029bda33f423453907331d74183f3767caf64a2900a4d334e
    spec:
      serviceAccountName: do-okteto-enterprise
      volumes:
        - name: tls-certs
          secret:
            defaultMode: 420
            secretName: default-ssl-certificate
      containers:
        - name: api
          image: okteto/backend:1.6.79
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          args: [ "api" ]
          envFrom:
          - configMapRef:
              name: "do-okteto-enterprise"
          - secretRef:
              name: do-okteto-enterprise
          volumeMounts:
            - name: tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
            failureThreshold: 3
          resources:
            {}
---
# Source: okteto-enterprise/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-frontend"
  labels:
    app.kubernetes.io/component: "frontend"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-frontend"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-frontend"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-frontend"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "frontend"
        app.kubernetes.io/part-of: "okteto"
    spec:
      serviceAccountName: do-okteto-enterprise
      containers:
        - name: frontend
          image: okteto/frontend:1.6.79
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: MIXPANEL_TOKEN
              value: 
          readinessProbe:
            httpGet:
              path: /index.html
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3    
            failureThreshold: 1
          resources:
            {}
---
# Source: okteto-enterprise/templates/registry-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-registry"
  labels:
    app.kubernetes.io/component: "registry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-registry"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-registry"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-registry"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "registry"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/config: 5f961b507d8953c82b9070fc93931aba170547abe9340ad29405538837ca9bfd
        checksum/secret: 289338464079130fcff2d2afe0efc1dc403d1eecdfb808fe2aba1b173853f189
        
    spec:
      serviceAccountName: default
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: do-okteto-enterprise-registry
        - name: config
          configMap:
            name: do-okteto-enterprise-registry-config
        - name: tls-certs
          secret:
            defaultMode: 420
            secretName: default-ssl-certificate
      containers:
        - name: registry
          image: registry:2
          imagePullPolicy: IfNotPresent
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          ports:
            - name: registry
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          env:
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: do-okteto-enterprise-registry-secret
                  key: haSharedSecret
            - name: REGISTRY_STORAGE_DELETE_ENABLED
              value: "true"
            - name: REGISTRY_AUTH_TOKEN_REALM
              value: "https://okteto.localhost/auth/registry"
            - name: REGISTRY_AUTH_TOKEN_SERVICE
              value: "okteto-registry"
            - name: REGISTRY_AUTH_TOKEN_ISSUER
              value: "okteto-registry"
            - name: REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE
              value: "/run/secrets/tls/tls.crt"
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: config
              mountPath: "/etc/docker/registry"
              readOnly: true
            - name: tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
            - name: data
              mountPath: /var/lib/registry/
          resources:
            {}
---
# Source: okteto-enterprise/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
      app.kubernetes.io/instance: do
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "webhook"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/configmap: 412924f061233c3a43b93b18b0f63f68ac2e32bcefa4f2613e7d276477acb246
        checksum/secrets: 42406e9e3870bdbb4ad45753d4b16506574495f4a958b5e2aa6d47bc7e9ccfb8
    spec:
      serviceAccountName: do-okteto-enterprise
      volumes:
        - name: webhook-tls-certs
          secret:
            defaultMode: 420
            secretName: do-okteto-enterprise-internal-tls
      containers:
        - name: server
          image: okteto/backend:1.6.79
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 443
          ports:
            - name: http
              containerPort: 8080
          args: [ "webhook" ]
          envFrom:
          - configMapRef:
              name: "do-okteto-enterprise"
          - secretRef:
              name: do-okteto-enterprise
          env:
            - name: PORT
              value: "443"
          volumeMounts:
            - name: webhook-tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /readiness
              port: 443
            initialDelaySeconds: 3
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /healthz
              port: http
            initialDelaySeconds: 3
            periodSeconds: 3
            failureThreshold: 3
          resources:
            {}
---
# Source: okteto-enterprise/templates/buildkit-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "do-okteto-enterprise-buildkit"
  labels:
    app.kubernetes.io/component: "buildkit"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-buildkit"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "do-okteto-enterprise-buildkit"
      app.kubernetes.io/instance: do
  serviceName: do-okteto-enterprise-buildkit
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-buildkit"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "buildkit"
        app.kubernetes.io/part-of: "okteto"
    spec:
      serviceAccountName: default
      volumes:
        - name: tls-certs
          secret:
            defaultMode: 420
            secretName: default-ssl-certificate
      containers:
      - args:
        - --addr
        - tcp://0.0.0.0:1234
        - --oci-worker-gc
        - --oci-worker-gc-keepstorage
        - "120000"
        - --tlscert
        - /run/secrets/tls/tls.crt
        - --tlskey
        - /run/secrets/tls/tls.key
        - --authorization-endpoint
        - "https://okteto.localhost/auth/buildkit"
        image: okteto/buildkit:v0.6.4-1
        name: buildkitd
        ports:
        - containerPort: 1234
          protocol: TCP
        securityContext:
          privileged: true
        volumeMounts:
          - name: "storage"
            subPath: data
            mountPath: /var/lib/buildkit
          - name: tls-certs
            mountPath: /run/secrets/tls
            readOnly: true
        resources:
            {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
    - metadata:
        name: "storage"
      spec:
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: 40Gi
---
# Source: okteto-enterprise/templates/migration-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "do-okteto-enterprise-migration-1.6.79"
  labels:
    app.kubernetes.io/component: "migration"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-migration"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "do-okteto-enterprise-migration"
        app.kubernetes.io/instance: do
        app.kubernetes.io/component: "migration"
        app.kubernetes.io/part-of: "okteto"
      annotations:
        checksum/configmap: 412924f061233c3a43b93b18b0f63f68ac2e32bcefa4f2613e7d276477acb246
        checksum/secrets: 8ba60211f7d5d20029bda33f423453907331d74183f3767caf64a2900a4d334e
    spec:
      restartPolicy: Never
      serviceAccountName: do-okteto-enterprise
      volumes:
        - name: tls-certs
          secret:
            defaultMode: 420
            secretName: default-ssl-certificate
      containers:
        - name: api
          image: okteto/backend:1.6.79
          imagePullPolicy: IfNotPresent
          args: [ "migrate" ]
          envFrom:
          - configMapRef:
              name: "do-okteto-enterprise"
          - secretRef:
              name: do-okteto-enterprise
          volumeMounts:
            - name: tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
          resources:
            {}
---
# Source: okteto-enterprise/templates/gc-cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "do-okteto-enterprise-gc"
  labels:
    app.kubernetes.io/component: "gc"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-gc"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "@hourly"
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: "gc"
        app.kubernetes.io/part-of: "okteto"
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/component: "gc"
            app.kubernetes.io/part-of: "okteto"
        spec:
          serviceAccountName: do-okteto-enterprise
          volumes:
          - name: tls-certs
            secret:
              defaultMode: 420
              secretName: default-ssl-certificate
          restartPolicy: Never
          containers:
            - name: gc
              image: okteto/backend:1.6.79
              imagePullPolicy: IfNotPresent
              args: [ "gc" ]
              envFrom:
              - configMapRef:
                  name: "do-okteto-enterprise"
              - secretRef:
                  name: do-okteto-enterprise
              volumeMounts:
                - name: tls-certs
                  mountPath: /run/secrets/tls
                  readOnly: true
---
# Source: okteto-enterprise/templates/telemetry-cronjob.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "do-okteto-enterprise-telemetry"
  labels:
    app.kubernetes.io/component: "telemetry"
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/name: "do-okteto-enterprise-telemetry"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
spec:
  schedule: "@daily"
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: "telemetry"
        app.kubernetes.io/part-of: "okteto"
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/component: "telemetry"
            app.kubernetes.io/part-of: "okteto"
        spec:
          serviceAccountName: do-okteto-enterprise
          restartPolicy: Never
          containers:
            - name: telemetry
              image: okteto/backend:1.6.79
              imagePullPolicy: IfNotPresent
              args: [ "telemetry" ]
              envFrom:
              - configMapRef:
                  name: "do-okteto-enterprise"
              - secretRef:
                  name: do-okteto-enterprise
---
# Source: okteto-enterprise/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/name: okteto-enterprise
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/component: "api"
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - okteto.localhost
  rules:
    - host: okteto.localhost
      http:
        paths:
          - path: /healthz
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /github
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /graphql
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /auth
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          
          - path: "/"
            backend:
              serviceName: do-okteto-enterprise-frontend
              servicePort: 8080
    - host: localhost
      http:
        paths:
          - path: /healthz
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /github
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /graphql
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          - path: /auth
            backend:
              serviceName: do-okteto-enterprise-api
              servicePort: 8080
          
          - path: "/"
            backend:
              serviceName: do-okteto-enterprise-frontend
              servicePort: 8080
---
# Source: okteto-enterprise/templates/registry-ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: do-okteto-enterprise-registry
  labels:
    app.kubernetes.io/name: okteto-enterprise-registry
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: "okteto"
    app.kubernetes.io/component: "registry"
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
  - hosts:
    - registry.localhost
  rules:
    - host: registry.localhost
      http:
        paths:
          - path: "/"
            backend:
              serviceName: do-okteto-enterprise-registry
              servicePort: 5000
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-rbac.yaml
### Webhook ###
---
# Source: okteto-enterprise/templates/internal-certificate.yaml
# Generate a CA Certificate used to sign certificates for the webhook
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: do-okteto-enterprise-ca
  namespace: "okteto"
  labels:
    app: okteto-enterprise
    chart: okteto-enterprise-0.5.1
    release: do
    heritage: Helm
spec:
  secretName: do-okteto-enterprise-ca
  duration: 43800h # 5y
  issuerRef:
    name: do-okteto-enterprise-selfsign
  commonName: "ca.okteto.cert-manager"
  isCA: true
---
# Source: okteto-enterprise/templates/internal-certificate.yaml
# Finally, generate a serving certificate for the webhook to use
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: do-okteto-enterprise-internal-tls
  namespace: "okteto"
  labels:
    app: okteto-enterprise
    chart: okteto-enterprise-0.5.1
    release: do
    heritage: Helm
spec:
  secretName: do-okteto-enterprise-internal-tls
  duration: 8760h # 1y
  issuerRef:
    name: do-okteto-enterprise-ca
  dnsNames:
  - do-okteto-enterprise-mutation-webhook
  - do-okteto-enterprise-mutation-webhook.okteto
  - do-okteto-enterprise-mutation-webhook.okteto.svc
---
# Source: okteto-enterprise/templates/wildcard-certificate.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
 name: default-ssl-certificate
 labels:
   app.kubernetes.io/part-of: "okteto"
   app.kubernetes.io/component: "wildcard"
spec:
 secretName: default-ssl-certificate
 issuerRef:
   name: do-okteto-enterprise
   kind: Issuer
 dnsNames:
   - "*.localhost"
---
# Source: okteto-enterprise/templates/internal-certificate.yaml
# Create a selfsigned Issuer, in order to create a root CA certificate for
# signing webhook serving certificates
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: do-okteto-enterprise-selfsign
  namespace: "okteto"
  labels:
    app: okteto-enterprise
    chart: okteto-enterprise-0.5.1
    release: do
    heritage: Helm
spec:
  selfSigned: {}
---
# Source: okteto-enterprise/templates/internal-certificate.yaml
# Create an Issuer that uses the above generated CA certificate to issue certs
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: do-okteto-enterprise-ca
  namespace: "okteto"
  labels:
    app: okteto-enterprise
    chart: okteto-enterprise-0.5.1
    release: do
    heritage: Helm
spec:
  ca:
    secretName: do-okteto-enterprise-ca
---
# Source: okteto-enterprise/templates/issuer.yaml
apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  name: do-okteto-enterprise
  labels:
    app.kubernetes.io/part-of: "okteto"
spec: 
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email:  "admin@example.com"
    privateKeySecretRef:
      name: do-okteto-enterprise-letsencrypt
    solvers:
    - dns01:
          digitalocean:
            tokenSecretRef:
              name: okteto-cloud-secret
              key: key
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-mutating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: do-cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "okteto/do-cert-manager-webhook-tls"
webhooks:
  - name: webhook.cert-manager.io
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: do-cert-manager-webhook
        namespace: "okteto"
        path: /mutate
---
# Source: okteto-enterprise/templates/webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: "do-okteto-enterprise-mutation-webhook"
  labels:
    app.kubernetes.io/name: "do-okteto-enterprise-mutation-webhook"
    helm.sh/chart: okteto-enterprise-0.5.1
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
  annotations:
      cert-manager.io/inject-ca-from: "okteto/do-okteto-enterprise-internal-tls"
webhooks:
  - name: ingress.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/ingress"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: ["extensions"]
        apiVersions: ["v1beta1"]
        resources: ["ingresses"]
      - operations: [ "CREATE", "UPDATE" ]
        apiGroups: ["networking.k8s.io"]
        apiVersions: ["v1beta1"]
        resources: ["ingresses"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: service.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/service"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE", "DELETE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["services"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: deployment.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/deployment"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["apps"]
        apiVersions: ["v1"]
        resources: ["deployments"]
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["extensions"]
        apiVersions: ["v1beta1"]
        resources: ["deployments"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: statefulset.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/statefulset"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["apps"]
        apiVersions: ["v1"]
        resources: ["statefulsets"]
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["extensions"]
        apiVersions: ["v1beta1"]
        resources: ["statefulsets"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: pod.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/pod"
        namespace: "okteto"
      caBundle:
    rules:
      - operations: [ "CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: serviceaccount.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/serviceaccount"
        namespace: "okteto"
      caBundle:
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["serviceaccounts"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: role.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/role"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["rbac.authorization.k8s.io"]
        apiVersions: ["v1"]
        resources: ["roles"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
  - name: rolebinding.webhook.okteto.com
    failurePolicy: Fail
    clientConfig:
      service:
        name: "do-okteto-enterprise-mutation-webhook"
        path: "/mutate/rolebinding"
        namespace: "okteto"
      caBundle: 
    rules:
      - operations: [ "CREATE", "UPDATE"]
        apiGroups: ["rbac.authorization.k8s.io"]
        apiVersions: ["v1"]
        resources: ["rolebindings"]
    namespaceSelector:
      matchLabels:
        dev.okteto.com: "true"
---
# Source: okteto-enterprise/charts/cert-manager/templates/webhook-validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: do-cert-manager-webhook
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: do
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: cert-manager-v0.13.0
  annotations:
    cert-manager.io/inject-ca-from-secret: "okteto/do-cert-manager-webhook-tls"
webhooks:
  - name: webhook.cert-manager.io
    namespaceSelector:
      matchExpressions:
      - key: "cert-manager.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - okteto
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: do-cert-manager-webhook
        namespace: "okteto"
        path: /mutate
